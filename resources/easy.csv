name,constructor
<game>,(game <string>)
<game>,(game <string> <players> [<mode>] <equipment> <rules.rules>)
<game>,<match>
<players>,(players <int>)
<players>,(players {<players.player>})
<players.player>,(player <directionFacing>)
<dominoes>,(dominoes [upTo:<int>])
<hints>,(hints [<string>] {<equipment.hint>} [<siteType>])
<map>,(map [<string>] {<int>} {<int>})
<map>,(map [<string>] {<math.pair>})
<regions>,(regions [<string>] [<roleType>] ({<int>} | <sites> | {<sites>} | <regionTypeStatic> | {<regionTypeStatic>}) [<string>])
<container.board.board>,(board <graph> [<board.track> | {<board.track>}] [<equipment.values> | {<equipment.values>}] [use:<siteType>] [largeStack:<boolean>])
<container.board.board>,<boardless>
<container.board.board>,<mancalaBoard>
<container.board.board>,<surakartaBoard>
<board.track>,(track <string> ({<int>} | <string> | {<equipment.trackStep>}) [loop:<boolean>] [<int> | <roleType>] [directed:<boolean>])
<boardless>,(boardless <tilingBoardlessType> [<dim>] [largeStack:<boolean>])
<mancalaBoard>,(mancalaBoard <int> <int> [store:<storeType>] [numStores:<int>] [largeStack:<boolean>] [<board.track> | {<board.track>}])
<surakartaBoard>,(surakartaBoard <graph> [loops:<int>] [from:<int>] [largeStack:<boolean>])
<effect>,<effect.add>
<effect>,<addScore>
<effect>,<attract>
<effect>,<avoidStoredState>
<effect>,<bet>
<effect>,<claim>
<effect>,<custodial>
<effect>,<effect.deal>
<effect>,<directional>
<effect>,<do>
<effect>,<enclose>
<effect>,<firstMoveOnTrack>
<effect>,<flip>
<effect>,<operators.foreach.forEach>
<effect>,<forget>
<effect>,<fromTo>
<effect>,<hop>
<effect>,<intervene>
<effect>,<leap>
<effect>,<max.max>
<effect>,<moveAgain>
<effect>,<note>
<effect>,<pass>
<effect>,<playCard>
<effect>,<priority>
<effect>,<promote>
<effect>,<propose>
<effect>,<push>
<effect>,<remember>
<effect>,<effect.remove>
<effect>,<roll>
<effect>,<satisfy>
<effect>,<select>
<effect>,<effect.set.set>
<effect>,<shoot>
<effect>,<slide>
<effect>,<sow>
<effect>,<effect.step>
<effect>,<surround>
<effect>,<swap.swap>
<effect>,<take>
<effect>,<trigger>
<effect>,<vote>
<effect>,<while>
<apply>,(apply if:<boolean>)
<apply>,(apply <nonDecision>)
<apply>,(apply if:<boolean> <nonDecision>)
<attract>,(attract [<moves.from>] [<absoluteDirection>] [<then>])
<bet>,(bet (<moves.player> | <roleType>) <range> [<then>])
<claim>,(claim [<moves.piece>] <moves.to> [<then>])
<custodial>,(custodial [<moves.from>] [<absoluteDirection>] [<moves.between>] [<moves.to>] [<then>])
<directional>,(directional [<moves.from>] [<direction>] [<moves.to>] [<then>])
<effect.add>,(add [<moves.piece>] <moves.to> [count:<int>] [stack:<boolean>] [<then>])
<effect.deal>,(deal <dealableType> [<int>] [beginWith:<int>] [<then>])
<effect.remove>,(remove [<siteType>] (<int> | <sites>) [level:<int>] [at:<whenType>] [count:<int>] [<then>])
<effect.step>,(step [<moves.from>] [<direction>] <moves.to> [stack:<boolean>] [<then>])
<enclose>,(enclose [<siteType>] [<moves.from>] [<direction>] [<moves.between>] [numException:<int>] [<then>])
<flip>,(flip [<siteType>] [<int>] [<then>])
<fromTo>,(fromTo <moves.from> <moves.to> [count:<int>] [copy:<boolean>] [stack:<boolean>] [<roleType>] [<then>])
<hop>,(hop [<moves.from>] [<direction>] [<moves.between>] <moves.to> [stack:<boolean>] [<then>])
<intervene>,(intervene [<moves.from>] [<absoluteDirection>] [<moves.between>] [<moves.to>] [<then>])
<leap>,(leap [<moves.from>] {{<stepType>}} [forward:<boolean>] [rotations:<boolean>] <moves.to> [<then>])
<note>,(note [player:<int> | player:<roleType>] (<string> | <int> | <ints> | <float> | <boolean> | <sites> | <range> | <direction> | <graph>) [to:<moves.player> | to:<roleType>])
<pass>,(pass [<then>])
<playCard>,(playCard [<then>])
<promote>,(promote [<siteType>] [<int>] <moves.piece> [<moves.player> | <roleType>] [<then>])
<propose>,(propose (<string> | {<string>}) [<then>])
<push>,(push [<moves.from>] <direction> [<then>])
<random>,(random <moves> num:<int>)
<random>,(random {<float>} {<moves>})
<roll>,(roll [<then>])
<satisfy>,(satisfy (<boolean> | {<boolean>}))
<select>,(select <moves.from> [<moves.to>] [<then>])
<shoot>,(shoot <moves.piece> [<moves.from>] [<absoluteDirection>] [<moves.between>] [<moves.to>] [<then>])
<slide>,(slide [<moves.from>] [<string>] [<direction>] [<moves.between>] [<moves.to>] [stack:<boolean>] [<then>])
<sow>,(sow [<siteType>] [<int>] [count:<int>] [numPerHole:<int>] [<string>] [owner:<int>] [if:<boolean>] [sowEffect:<moves>] [apply:<nonDecision>] [includeSelf:<boolean>] [origin:<boolean>] [skipIf:<boolean>] [backtracking:<boolean> | forward:<boolean>] [<then>])
<surround>,(surround [<moves.from>] [<relationType>] [<moves.between>] [<moves.to>] [except:<int>] [with:<moves.piece>] [<then>])
<then>,(then <nonDecision> [applyAfterAllMoves:<boolean>])
<trigger>,(trigger <string> (<int> | <roleType>) [<then>])
<vote>,(vote (<string> | {<string>}) [<then>])
<moves>,<effect.add>
<moves>,<addScore>
<moves>,<allCombinations>
<moves>,<logical.and>
<moves>,<append>
<moves>,<apply>
<moves>,<attract>
<moves>,<avoidStoredState>
<moves>,<bet>
<moves>,<claim>
<moves>,<custodial>
<moves>,<effect.deal>
<moves>,<decision>
<moves>,<directional>
<moves>,<do>
<moves>,<effect>
<moves>,<enclose>
<moves>,<firstMoveOnTrack>
<moves>,<flip>
<moves>,<operators.foreach.forEach>
<moves>,<forget>
<moves>,<fromTo>
<moves>,<hop>
<moves>,<logical.if>
<moves>,<intervene>
<moves>,<leap>
<moves>,<max.max>
<moves>,<move>
<moves>,<moveAgain>
<moves>,<nonDecision>
<moves>,<note>
<moves>,<operator>
<moves>,<logical.or>
<moves>,<pass>
<moves>,<playCard>
<moves>,<priority>
<moves>,<promote>
<moves>,<propose>
<moves>,<push>
<moves>,<random>
<moves>,<remember>
<moves>,<effect.remove>
<moves>,<roll>
<moves>,<satisfy>
<moves>,<select>
<moves>,<effect.set.set>
<moves>,<shoot>
<moves>,<slide>
<moves>,<sow>
<moves>,<effect.step>
<moves>,<surround>
<moves>,<swap.swap>
<moves>,<take>
<moves>,<trigger>
<moves>,<vote>
<moves>,<while>
<decision>,<move>
<move>,(move Set Rotation [<moves.to>] [{<int>} | <int>] [previous:<boolean>] [next:<boolean>] [<then>])
<move>,(move Step [<moves.from>] [<direction>] <moves.to> [stack:<boolean>] [<then>])
<move>,(move Slide [<moves.from>] [<string>] [<direction>] [<moves.between>] [<moves.to>] [stack:<boolean>] [<then>])
<move>,(move Shoot <moves.piece> [<moves.from>] [<absoluteDirection>] [<moves.between>] [<moves.to>] [<then>])
<move>,(move Select <moves.from> [<moves.to>] [<then>])
<move>,(move Swap Players (<int> <roleType>) (<int> <roleType>) [<then>])
<move>,(move Swap Pieces [<int>] [<int>] [<then>])
<move>,(move Remove [<siteType>] (<int> | <sites>) [level:<int>] [at:<whenType>] [count:<int>] [<then>])
<move>,(move Set TrumpSuit (<int> | <intArray.math.difference>) [<then>])
<move>,(move Set NextPlayer (<moves.player> | <ints>) [<then>])
<move>,(move Hop [<moves.from>] [<direction>] [<moves.between>] <moves.to> [stack:<boolean>] [<then>])
<move>,(move <moves.from> <moves.to> [count:<int>] [copy:<boolean>] [stack:<boolean>] [<roleType>] [<then>])
<move>,(move Bet (<moves.player> | <roleType>) <range> [<then>])
<move>,(move <moveSiteType> [<moves.piece>] <moves.to> [count:<int>] [stack:<boolean>] [<then>])
<move>,(move <moveMessageType> (<string> | {<string>}) [<then>])
<move>,(move Promote [<siteType>] [<int>] <moves.piece> [<moves.player> | <roleType>] [<then>])
<move>,(move Leap [<moves.from>] {{<stepType>}} [forward:<boolean>] [rotations:<boolean>] <moves.to> [<then>])
<move>,(move <moveSimpleType> [<then>])
<moveMessageType>,Propose
<moveMessageType>,Vote
<moveSimpleType>,Pass
<moveSimpleType>,PlayCard
<moveSiteType>,Add
<moveSiteType>,Claim
<nonDecision>,<effect>
<nonDecision>,<operator>
<avoidStoredState>,(avoidStoredState <moves> [<then>])
<do>,(do <moves> [next:<moves>] [ifAfterwards:<boolean>] [<then>])
<firstMoveOnTrack>,(firstMoveOnTrack [<string>] [<roleType>] <moves> [<then>])
<priority>,(priority <moves> <moves> [<then>])
<priority>,(priority {<moves>} [<then>])
<while>,(while <boolean> <moves> [<then>])
<max.max>,(max Distance [<string>] [<roleType>] <moves> [<then>])
<max.max>,(max <maxMovesType> [withValue:<boolean>] <moves> [<then>])
<maxMovesType>,Captures
<maxMovesType>,Moves
<effect.set.set>,(set NextPlayer (<moves.player> | <ints>) [<then>])
<effect.set.set>,(set Rotation [<moves.to>] [{<int>} | <int>] [previous:<boolean>] [next:<boolean>] [<then>])
<effect.set.set>,(set <setPlayerType> (<moves.player> | <roleType>) <int> [<then>])
<effect.set.set>,(set TrumpSuit (<int> | <intArray.math.difference>) [<then>])
<effect.set.set>,(set Hidden [<hiddenData> | {<hiddenData>}] [<siteType>] (at:<int> | <sites>) [level:<int>] [<boolean>] (to:<moves.player> | to:<roleType>) [<then>])
<effect.set.set>,(set Team <int> {<roleType>} [<then>])
<effect.set.set>,(set <setSiteType> [<siteType>] at:<int> [level:<int>] <int> [<then>])
<effect.set.set>,(set <setValueType> [<int>] [<then>])
<effect.set.set>,(set Pending [<int> | <sites>] [<then>])
<effect.set.set>,(set Var [<string>] [<int>] [<then>])
<setPlayerType>,Score
<setPlayerType>,Value
<setSiteType>,Count
<setSiteType>,State
<setSiteType>,Value
<setValueType>,Counter
<setValueType>,Pot
<addScore>,(addScore ({<int>} | {<roleType>}) {<int>} [<then>])
<addScore>,(addScore (<moves.player> | <roleType>) <int> [<then>])
<moveAgain>,(moveAgain [<then>])
<forget>,(forget Value [<string>] <int> [<then>])
<remember>,(remember State [<then>])
<remember>,(remember Value [<string>] <int> [unique:<boolean>] [<then>])
<swap.swap>,(swap Players (<int> | <roleType>) (<int> | <roleType>) [<then>])
<swap.swap>,(swap Pieces [<int> <int>] [<then>])
<take>,(take Control (of:<roleType> | of:<int>) (by:<roleType> | by:<int>) [at:<int> | to:<sites>] [<siteType>] [<then>])
<take>,(take Domino [<then>])
<operators.foreach.forEach>,(forEach Die [<int>] [combined:<boolean>] [replayDouble:<boolean>] [if:<boolean>] <moves> [<then>])
<operators.foreach.forEach>,(forEach Direction [<moves.from>] [<direction>] [<moves.between>] (<moves.to> | <moves>) [<then>])
<operators.foreach.forEach>,(forEach Site <sites> <moves> [noMoveYet:<moves>] [<then>])
<operators.foreach.forEach>,(forEach Group [<siteType>] [<direction>] [if:<boolean>] <moves> [<then>])
<operators.foreach.forEach>,(forEach Team <moves> [<then>])
<operators.foreach.forEach>,(forEach Level [<siteType>] <int> [<stackDirection>] <moves> [<then>])
<operators.foreach.forEach>,(forEach <ints> <moves> [<then>])
<operators.foreach.forEach>,(forEach Player <moves> [<then>])
<operators.foreach.forEach>,(forEach Value <ints> <moves> [<then>])
<operators.foreach.forEach>,(forEach Piece [on:<siteType>] [<string> | {<string>}] [container:<int> | <string>] [<moves>] [<moves.player> | <roleType>] [top:<boolean>] [<then>])
<operators.foreach.forEach>,(forEach Value min:<int> max:<int> <moves> [<then>])
<operator>,<allCombinations>
<operator>,<logical.and>
<operator>,<append>
<operator>,<logical.if>
<operator>,<logical.or>
<allCombinations>,(allCombinations <moves> <moves> [<then>])
<append>,(append <nonDecision> [<then>])
<logical.and>,(and {<moves>} [<then>])
<logical.and>,(and <moves> <moves> [<then>])
<logical.if>,(if <boolean> <moves> [<moves>] [<then>])
<logical.or>,(or {<moves>} [<then>])
<logical.or>,(or <moves> <moves> [<then>])
<phase.phase>,(phase <string> [<roleType>] [<mode>] <play> [<end>] [<nextPhase> | {<nextPhase>}])
<nextPhase>,(nextPhase [<roleType> | <moves.player>] [<boolean>] [<string>])
<mode>,(mode <modeType>)
<equipment>,(equipment {<item>})
<item>,<component>
<item>,<container>
<item>,<dominoes>
<item>,<hints>
<item>,<map>
<item>,<regions>
<component>,(component <string> <roleType> {{<stepType>}} <directionFacing> <moves> <int> <int> <int>)
<component>,<component.card>
<component>,<die>
<component>,<domino>
<component>,<component.piece>
<component>,<tile>
<component.card>,(card <string> <roleType> <cardType> rank:<int> value:<int> trumpRank:<int> trumpValue:<int> suit:<int> [<moves>] [maxState:<int>] [maxCount:<int>] [maxValue:<int>])
<component.piece>,(piece <string> [<roleType>] [<directionFacing>] [<flips>] [<moves>] [maxState:<int>] [maxCount:<int>] [maxValue:<int>])
<die>,(die <string> <roleType> numFaces:<int> [<directionFacing>] [<moves>])
<tile>,(tile <string> [<roleType>] [{<stepType>} | {{<stepType>}}] [numSides:<int>] [slots:{<int>} | slotsPerSide:<int>] [{<path>}] [<flips>] [<moves>] [maxState:<int>] [maxCount:<int>] [maxValue:<int>])
<domino>,(domino <string> <roleType> value:<int> value2:<int> [<moves>])
<path>,(path from:<int> [slotsFrom:<int>] to:<int> [slotsTo:<int>] colour:<int>)
<container>,<container.board.board>
<container>,<deck>
<container>,<dice>
<container>,<other.hand>
<deck>,(deck [<roleType>] [cardsBySuit:<int>] [suits:<int>] [{<equipment.card>}])
<dice>,(dice [d:<int>] [faces:{<int>} | facesByDie:{{<int>}} | from:<int>] [<roleType>] num:<int> [biased:{<int>}])
<other.hand>,(hand <roleType> [size:<int>])
<rules.rules>,(rules [<meta>] [<start>] [<play>] phases:{<phase.phase>} [<end>])
<rules.rules>,(rules [<meta>] [<start>] <play> <end>)
<meta>,(meta ({<metaRule>} | <metaRule>))
<metaRule>,<automove>
<metaRule>,<gravity>
<metaRule>,<noRepeat>
<metaRule>,<passEnd>
<metaRule>,<meta.swap>
<noRepeat>,(noRepeat [<repetitionType>])
<passEnd>,(passEnd <passEndType>)
<start>,(start ({<startRule>} | <startRule>))
<start.deal>,(deal <dealableType> [<int>])
<startRule>,<start.deal>
<startRule>,<forEach.forEach>
<startRule>,<place>
<startRule>,<deductionPuzzle.set>
<startRule>,<start.set.set>
<deductionPuzzle.set>,(set [<siteType>] {{<int>}})
<forEach.forEach>,(forEach Player <startRule>)
<forEach.forEach>,(forEach Value min:<int> max:<int> <startRule>)
<forEach.forEach>,(forEach Site <sites> [if:<boolean>] <startRule>)
<forEach.forEach>,(forEach Team <startRule>)
<forEach.forEach>,(forEach <ints> <startRule>)
<place>,(place Random [<sites>] {<string>} [count:<int>] [state:<int>] [value:<int>] [<siteType>])
<place>,(place Stack (<string> | items:{<string>}) [<string>] [<siteType>] [<int> | {<int>} | <sites> | coord:<string> | {<string>}] [count:<int> | counts:{<int>}] [state:<int>] [rotation:<int>] [value:<int>])
<place>,(place <string> [<siteType>] [{<int>}] [<sites>] [{<string>}] [counts:{<int>}] [state:<int>] [rotation:<int>] [value:<int>])
<place>,(place <string> [<string>] [<siteType>] [<int>] [coord:<string>] [count:<int>] [state:<int>] [rotation:<int>] [value:<int>])
<place>,(place Random {<math.count>} <int> [<siteType>])
<place>,(place Random {<string>} [count:{<int>}] [state:<int>] [value:<int>] <int> [<siteType>])
<start.set.set>,(set <roleType> [<siteType>] [{<int>}] [<sites>] [{<string>}])
<start.set.set>,(set <roleType> [<siteType>] [<int>] [coord:<string>])
<start.set.set>,(set Hidden [<hiddenData> | {<hiddenData>}] [<siteType>] (at:<int> | <sites>) [level:<int>] [<boolean>] to:<roleType>)
<start.set.set>,(set RememberValue [<string>] (<int> | <sites>) [unique:<boolean>])
<start.set.set>,(set Team <int> {<roleType>})
<start.set.set>,(set <setStartSitesType> <int> [<siteType>] (at:<int> | to:<sites>))
<start.set.set>,(set <setStartPlayerType> [<roleType>] <int>)
<setStartPlayerType>,Amount
<setStartPlayerType>,Score
<setStartSitesType>,Cost
<setStartSitesType>,Count
<setStartSitesType>,Phase
<play>,(play <moves>)
<end>,(end (<endRule> | {<endRule>}))
<byScore>,(byScore [{<end.score>}])
<end.forEach>,(forEach [<roleType> | Track] if:<boolean> <result>)
<end.if>,(if <boolean> [<end.if> | {<end.if>}] [<result>])
<endRule>,<end.forEach>
<endRule>,<end.if>
<payoffs>,(payoffs {<payoff>})
<result>,(result <roleType> <resultType>)
<result>,<byScore>
<result>,<payoffs>
<match>,(match <string>)
<match>,(match <string> [<players>] <games> <end>)
<games>,(games (<subgame> | {<subgame>}))
<subgame>,(subgame <string> [<string>] [next:<int>] [result:<int>])
<booleans.no.no>,(no Moves <roleType>)
<booleans.no.no>,(no Pieces [<siteType>] [<roleType> | of:<int>] [<string>] [in:<sites>])
<!=>,(!= <sites> <sites>)
<!=>,(!= <int> (<int> | <roleType>))
<<>,(< <int> <int>)
<<=>,(<= <int> <int>)
<=>,(= <sites> <sites>)
<=>,(= <int> (<int> | <roleType>))
<>>,(> <int> <int>)
<>=>,(>= <int> <int>)
<booleans.math.if>,(if <boolean> <boolean> [<boolean>])
<math.and>,(and {<boolean>})
<math.and>,(and <boolean> <boolean>)
<math.or>,(or {<boolean>})
<math.or>,(or <boolean> <boolean>)
<not>,(not <boolean>)
<xor>,(xor <boolean> <boolean>)
<booleans.is.is>,(is Triggered <string> (<int> | <roleType>))
<booleans.is.is>,(is <isSimpleType>)
<booleans.is.is>,(is Crossing <int> <int>)
<booleans.is.is>,(is <isStringType> <string>)
<booleans.is.is>,(is <isGraphType> <siteType>)
<booleans.is.is>,(is Hidden [<hiddenData>] [<siteType>] at:<int> [level:<int>] (to:<moves.player> | to:<roleType>))
<booleans.is.is>,(is Repeat [<repetitionType>])
<booleans.is.is>,(is Pattern {<stepType>} [<siteType>] [from:<int>] [what:<int> | whats:{<int>}])
<booleans.is.is>,(is <isTreeType> (<moves.player> | <roleType>))
<booleans.is.is>,(is RegularGraph (<moves.player> | <roleType>) [k:<int> | odd:<boolean> | even:<boolean>])
<booleans.is.is>,(is <isPlayerType> (<int> | <roleType>))
<booleans.is.is>,(is Line [<siteType>] <int> [<absoluteDirection>] [through:<int> | throughAny:<sites>] [<roleType> | what:<int> | whats:{<int>}] [exact:<boolean>] [contiguous:<boolean>] [if:<boolean>] [byLevel:<boolean>])
<booleans.is.is>,(is Loop [<siteType>] [surround:<roleType> | {<roleType>}] [<direction>] [<int>] [<int> | <sites>] [path:<boolean>])
<booleans.is.is>,(is Path <siteType> [from:<int>] (<moves.player> | <roleType>) length:<range> [closed:<boolean>])
<booleans.is.is>,(is <isSiteType> [<siteType>] <int>)
<booleans.is.is>,(is In [<int> | {<int>}] (<sites> | <ints>))
<booleans.is.is>,(is <isIntegerType> [<int>])
<booleans.is.is>,(is <isComponentType> [<int>] [<siteType>] [at:<int> | in:<sites>] [<moves>])
<booleans.is.is>,(is <isConnectType> [<int>] [<siteType>] [at:<int>] [<direction>] ({<sites>} | <roleType> | <regionTypeStatic>))
<booleans.is.is>,(is Related <relationType> [<siteType>] <int> (<int> | <sites>))
<booleans.is.is>,(is Target [<int> | <string>] {<int>} [<int> | {<int>}])
<isComponentType>,Threatened
<isComponentType>,Within
<isConnectType>,Blocked
<isConnectType>,Connected
<isGraphType>,LastFrom
<isGraphType>,LastTo
<isIntegerType>,AnyDie
<isIntegerType>,Even
<isIntegerType>,Flat
<isIntegerType>,Odd
<isIntegerType>,PipsMatch
<isIntegerType>,SidesMatch
<isIntegerType>,Visited
<isPlayerType>,Active
<isPlayerType>,Enemy
<isPlayerType>,Friend
<isPlayerType>,Mover
<isPlayerType>,Next
<isPlayerType>,Prev
<isSimpleType>,Cycle
<isSimpleType>,Full
<isSimpleType>,Pending
<isSiteType>,Empty
<isSiteType>,Occupied
<isStringType>,Decided
<isStringType>,Proposed
<isTreeType>,CaterpillarTree
<isTreeType>,SpanningTree
<isTreeType>,Tree
<isTreeType>,TreeCentre
<deductionPuzzle.is.is>,(is Unique [<siteType>])
<deductionPuzzle.is.is>,(is <isPuzzleRegionResultType> [<siteType>] [<sites>] [of:<int>] [<string>] <int>)
<isPuzzleRegionResultType>,Count
<isPuzzleRegionResultType>,Sum
<deductionPuzzle.all.all>,(all Different [<siteType>] [<sites>] [except:<int> | excepts:{<int>}])
<forAll>,(forAll <puzzleElementType> <boolean>)
<can>,(can Move <moves>)
<booleans.all.all>,(all Values <ints> if:<boolean>)
<booleans.all.all>,(all <allSitesType> <sites> if:<boolean>)
<booleans.all.all>,(all <allSimpleType>)
<booleans.all.all>,(all Groups [<siteType>] [<direction>] [of:<boolean>] if:<boolean>)
<allSimpleType>,DiceEqual
<allSimpleType>,DiceUsed
<allSimpleType>,Passed
<allSitesType>,Different
<allSitesType>,Sites
<value>,(value Piece [<siteType>] at:<int> [level:<int>])
<value>,(value Player (<int> | <roleType>))
<value>,(value Random <range>)
<trackSite>,(trackSite Move [from:<int>] [<roleType> | <moves.player> | <string>] steps:<int>)
<trackSite>,(trackSite EndSite [<moves.player> | <roleType>] [<string>])
<trackSite>,(trackSite FirstSite [<moves.player> | <roleType>] [<string>] [from:<int>] [if:<boolean>])
<pathExtent>,(pathExtent [<int>] [<int> | <sites>])
<state>,(state [<siteType>] at:<int> [level:<int>])
<amount>,(amount (<roleType> | <moves.player>))
<prev>,(prev [<prevType>])
<rotation>,(rotation [<siteType>] at:<int> [level:<int>])
<state.score>,(score (<moves.player> | <roleType>))
<var>,(var [<string>])
<what>,(what [<siteType>] at:<int> [level:<int>])
<who>,(who [<siteType>] at:<int> [level:<int>])
<topLevel>,(topLevel [<siteType>] at:<int>)
<size>,(size Group [<siteType>] at:<int> [<direction>] [if:<boolean>])
<size>,(size LargePiece [<siteType>] (in:<sites> | at:<int>))
<size>,(size Stack [<siteType>] [in:<sites> | at:<int>])
<size>,(size Array <ints>)
<size>,(size Territory [<siteType>] (<roleType> | <moves.player>) [<absoluteDirection>])
<%>,(% <int> <int>)
<ints.math.*>,(* ({<int>} | <ints>))
<ints.math.*>,(* <int> <int>)
<ints.math.+>,(+ ({<int>} | <ints>))
<ints.math.+>,(+ <int> <int>)
<ints.math.->,(- [<int>] <int>)
<ints.math./>,(/ <int> <int>)
<ints.math.^>,(^ <int> <int>)
<ints.math.abs>,(abs <int>)
<ints.math.if>,(if <boolean> <int> <int>)
<ints.math.max>,(max <ints>)
<ints.math.max>,(max <int> <int>)
<ints.math.min>,(min <ints>)
<ints.math.min>,(min <int> <int>)
<matchScore>,(matchScore <roleType>)
<ints.last.last>,(last <lastType> [afterConsequence:<boolean>])
<lastType>,From
<lastType>,LevelFrom
<lastType>,LevelTo
<lastType>,To
<iterator.edge>,(edge <int> <int>)
<iterator.from>,(from [at:<whenType>])
<iterator.hint>,(hint [<siteType>] [at:<int>])
<dice.face>,(face <int>)
<count.count>,(count <countComponentType> [<siteType>] [<roleType> | of:<int>] [<string>] [in:<sites>])
<count.count>,(count [<countSiteType>] [<siteType>] [in:<sites> | at:<int> | <string>])
<count.count>,(count <countSimpleType> [<siteType>])
<count.count>,(count Stack [<stackDirection>] [<siteType>] (at:<int> | to:<sites>) [if:<boolean>] [stop:<boolean>])
<count.count>,(count Value <int> in:<ints>)
<count.count>,(count StepsOnTrack [<roleType> | <moves.player> | <string>] [<int>] [<int>])
<count.count>,(count Steps [<siteType>] [<relationType>] [<effect.step>] [newRotation:<int>] <int> (<int> | <sites>))
<count.count>,(count Groups [<siteType>] [<direction>] [if:<boolean>] [min:<int>])
<count.count>,(count Liberties [<siteType>] [at:<int>] [<direction>] [if:<boolean>])
<countComponentType>,Pieces
<countComponentType>,Pips
<countSimpleType>,Active
<countSimpleType>,Cells
<countSimpleType>,Columns
<countSimpleType>,Edges
<countSimpleType>,Moves
<countSimpleType>,MovesThisTurn
<countSimpleType>,Phases
<countSimpleType>,Players
<countSimpleType>,Rows
<countSimpleType>,Trials
<countSimpleType>,Turns
<countSimpleType>,Vertices
<countSiteType>,Adjacent
<countSiteType>,Diagonal
<countSiteType>,Neighbours
<countSiteType>,Off
<countSiteType>,Orthogonal
<countSiteType>,Sites
<card.card>,(card <cardSiteType> at:<int> [level:<int>])
<cardSiteType>,Rank
<cardSiteType>,Suit
<cardSiteType>,TrumpRank
<cardSiteType>,TrumpValue
<where>,(where Level <string> (<int> | <roleType>) [state:<int>] [<siteType>] at:<int> [fromTop:<boolean>])
<where>,(where <int> [<siteType>])
<where>,(where <string> (<int> | <roleType>) [state:<int>] [<siteType>])
<where>,(where Level <int> [<siteType>] at:<int> [fromTop:<boolean>])
<sites>,(sites <sitesEdgeType>)
<sites>,(sites Group [<siteType>] (at:<int> | from:<sites>) [<direction>] [if:<boolean>])
<sites>,(sites Crossing at:<int> [<moves.player> | <roleType>])
<sites>,(sites ({<int>} | <ints>))
<sites>,(sites <sitesMoveType> <moves>)
<sites>,(sites [<siteType>] {<string>})
<sites>,(sites <sitesSimpleType> [<siteType>])
<sites>,(sites Loop [inside:<boolean>] [<siteType>] [surround:<roleType> | {<roleType>}] [<direction>] [<int>] [<int> | <sites>])
<sites>,(sites Pattern {<stepType>} [<siteType>] [from:<int>] [what:<int> | whats:{<int>}])
<sites>,(sites Random [<sites>] [num:<int>])
<sites>,(sites LargePiece [<siteType>] at:<int>)
<sites>,(sites Between [<direction>] [<siteType>] from:<int> [fromIncluded:<boolean>] to:<int> [toIncluded:<boolean>] [cond:<boolean>])
<sites>,(sites Hidden [<hiddenData>] [<siteType>] (to:<moves.player> | to:<roleType>))
<sites>,(sites Start <moves.piece>)
<sites>,(sites Occupied (by:<moves.player> | by:<roleType>) [container:<int> | container:<string>] [component:<int> | component:<string> | view.components:{<string>}] [top:<boolean>] [on:<siteType>])
<sites>,(sites Incident <siteType> of:<siteType> at:<int> [owner:<moves.player> | <roleType>])
<sites>,(sites Around [<siteType>] (<int> | <sites>) [<regionTypeDynamic>] [distance:<int>] [<absoluteDirection>] [if:<boolean>] [includeSelf:<boolean>])
<sites>,(sites Direction (from:<int> | from:<sites>) [<direction>] [included:<boolean>] [stop:<boolean>] [stopIncluded:<boolean>] [distance:<int>] [<siteType>])
<sites>,(sites LineOfSight [<lineOfSightType>] [<siteType>] [at:<int>] [<direction>])
<sites>,(sites [<siteType>] [<int>] {{<stepType>}} [rotations:<boolean>])
<sites>,(sites <sitesIndexType> [<siteType>] [<int>])
<sites>,(sites Side [<siteType>] [<moves.player> | <roleType> | <compassDirection>])
<sites>,(sites <sitesPlayerType> [<siteType>] [<moves.player> | <roleType>] [<nonDecision>] [<string>])
<sites>,(sites Track [<moves.player> | <roleType>] [<string>] [from:<int>] [to:<int>])
<sites>,(sites Distance [<siteType>] [<relationType>] [<effect.step>] [newRotation:<int>] from:<int> <range>)
<sites>,(sites [<moves.player> | <roleType>] [<siteType>] [<string>])
<sites>,<region.math.difference>
<sites>,<expand>
<sites>,<region.foreach.forEach>
<sites>,<region.math.if>
<sites>,<region.math.intersection>
<sites>,<region.last.last>
<sites>,<region.math.union>
<lineOfSightType>,Empty
<lineOfSightType>,Farthest
<lineOfSightType>,Piece
<sitesEdgeType>,Angled
<sitesEdgeType>,Axial
<sitesEdgeType>,Horizontal
<sitesEdgeType>,Slash
<sitesEdgeType>,Slosh
<sitesEdgeType>,Vertical
<sitesIndexType>,Cell
<sitesIndexType>,Column
<sitesIndexType>,Edge
<sitesIndexType>,Empty
<sitesIndexType>,Layer
<sitesIndexType>,Phase
<sitesIndexType>,Row
<sitesIndexType>,State
<sitesMoveType>,Between
<sitesMoveType>,From
<sitesMoveType>,To
<sitesPlayerType>,Hand
<sitesPlayerType>,Winning
<sitesSimpleType>,Board
<sitesSimpleType>,Bottom
<sitesSimpleType>,Centre
<sitesSimpleType>,ConcaveCorners
<sitesSimpleType>,ConvexCorners
<sitesSimpleType>,Corners
<sitesSimpleType>,Hint
<sitesSimpleType>,Inner
<sitesSimpleType>,LastFrom
<sitesSimpleType>,LastTo
<sitesSimpleType>,Left
<sitesSimpleType>,LineOfPlay
<sitesSimpleType>,Major
<sitesSimpleType>,Minor
<sitesSimpleType>,Outer
<sitesSimpleType>,Pending
<sitesSimpleType>,Perimeter
<sitesSimpleType>,Playable
<sitesSimpleType>,Right
<sitesSimpleType>,ToClear
<sitesSimpleType>,Top
<expand>,(expand [<int> | <string>] (<sites> | origin:<int>) [steps:<int>] [<absoluteDirection>] [<siteType>])
<region.math.difference>,(difference <sites> (<sites> | <int>))
<region.math.if>,(if <boolean> <sites> [<sites>])
<region.math.intersection>,(intersection {<sites>})
<region.math.intersection>,(intersection <sites> <sites>)
<region.math.union>,(union {<sites>})
<region.math.union>,(union <sites> <sites>)
<region.foreach.forEach>,(forEach of:<sites> <sites>)
<region.foreach.forEach>,(forEach <sites> if:<boolean>)
<region.foreach.forEach>,(forEach Team <sites>)
<region.foreach.forEach>,(forEach <ints> <sites>)
<exact>,(exact <int>)
<range.math.max>,(max <int>)
<range.math.min>,(min <int>)
<range>,(range <int> [<int>])
<range>,<exact>
<range>,<range.math.max>
<range>,<range.math.min>
<clip>,(clip <graph> <poly>)
<complete>,(complete <graph> [eachCell:<boolean>])
<dual>,(dual <graph>)
<hole>,(hole <graph> <poly>)
<intersect>,(intersect {<graph>})
<intersect>,(intersect <graph> <graph>)
<keep>,(keep <graph> <poly>)
<layers>,(layers <dim> <graph>)
<makeFaces>,(makeFaces <graph>)
<merge>,(merge {<graph>} [connect:<boolean>])
<merge>,(merge <graph> <graph> [connect:<boolean>])
<operators.add>,(add [<graph>] [vertices:{{<float>}}] [edges:{{{<float>}}} | edges:{{<dim>}}] [edgesCurved:{{{<float>}}}] [cells:{{{<float>}}} | cells:{{<dim>}}] [connect:<boolean>])
<operators.remove>,(remove <graph> <poly> [trimEdges:<boolean>])
<operators.remove>,(remove <graph> [cells:{{{<float>}}} | cells:{<dim>}] [edges:{{{<float>}}} | edges:{{<dim>}}] [vertices:{{<float>}} | vertices:{<dim>}] [trimEdges:<boolean>])
<operators.union>,(union {<graph>} [connect:<boolean>])
<operators.union>,(union <graph> <graph> [connect:<boolean>])
<recoordinate>,(recoordinate [<siteType>] [<siteType>] [<siteType>] <graph>)
<renumber>,(renumber [<siteType>] [<siteType>] [<siteType>] <graph>)
<rotate>,(rotate <float> <graph>)
<scale>,(scale <float> [<float>] [<float>] <graph>)
<shift>,(shift <float> <float> [<float>] <graph>)
<skew>,(skew <float> <graph>)
<splitCrossings>,(splitCrossings <graph>)
<subdivide>,(subdivide <graph> [min:<dim>])
<trim>,(trim <graph>)
<concentric>,(concentric (<concentricShapeType> | sides:<dim> | {<dim>}) [rings:<dim>] [steps:<dim>] [midpoints:<boolean>] [joinMidpoints:<boolean>] [joinCorners:<boolean>] [stagger:<boolean>])
<concentricShapeType>,Hexagon
<concentricShapeType>,Square
<concentricShapeType>,Target
<concentricShapeType>,Triangle
<rectangle>,(rectangle <dim> [<dim>] [diagonals:<diagonalsType>])
<regular>,(regular <basisType> <shapeType> <dim> [<dim>])
<repeat>,(repeat <dim> <dim> step:{{<float>}} (<poly> | {<poly>}))
<spiral>,(spiral turns:<dim> sites:<dim> [clockwise:<boolean>])
<wedge>,(wedge <dim> [<dim>])
<tri>,(tri (<poly> | {<dim>}))
<tri>,(tri [<triShapeType>] <dim> [<dim>])
<triShapeType>,Diamond
<triShapeType>,Hexagon
<triShapeType>,Limping
<triShapeType>,NoShape
<triShapeType>,Prism
<triShapeType>,Rectangle
<triShapeType>,Square
<triShapeType>,Star
<triShapeType>,Triangle
<tiling>,(tiling <tilingType> <dim> [<dim>])
<tiling>,(tiling <tilingType> (<poly> | {<dim>}))
<tilingType>,T31212
<tilingType>,T333333_33434
<tilingType>,T33336
<tilingType>,T33344
<tilingType>,T33434
<tilingType>,T3464
<tilingType>,T3636
<tilingType>,T4612
<tilingType>,T488
<square>,(square (<poly> | {<dim>}) [diagonals:<diagonalsType>])
<square>,(square [<squareShapeType>] <dim> [diagonals:<diagonalsType> | pyramidal:<boolean>])
<diagonalsType>,Alternating
<diagonalsType>,Concentric
<diagonalsType>,Implied
<diagonalsType>,Radiating
<diagonalsType>,Solid
<squareShapeType>,Diamond
<squareShapeType>,Limping
<squareShapeType>,NoShape
<squareShapeType>,Rectangle
<squareShapeType>,Square
<quadhex>,(quadhex <dim> [thirds:<boolean>])
<hex>,(hex (<poly> | {<dim>}))
<hex>,(hex [<hexShapeType>] <dim> [<dim>])
<hexShapeType>,Diamond
<hexShapeType>,Hexagon
<hexShapeType>,Limping
<hexShapeType>,NoShape
<hexShapeType>,Prism
<hexShapeType>,Rectangle
<hexShapeType>,Square
<hexShapeType>,Star
<hexShapeType>,Triangle
<celtic>,(celtic (<poly> | {<dim>}))
<celtic>,(celtic <dim> [<dim>])
<brick>,(brick [<brickShapeType>] <dim> [<dim>] [trim:<boolean>])
<brickShapeType>,Diamond
<brickShapeType>,Limping
<brickShapeType>,Prism
<brickShapeType>,Rectangle
<brickShapeType>,Spiral
<brickShapeType>,Square
<basis>,<brick>
<basis>,<celtic>
<basis>,<concentric>
<basis>,<hex>
<basis>,<quadhex>
<basis>,<rectangle>
<basis>,<spiral>
<basis>,<square>
<basis>,<tiling>
<basis>,<tri>
<basis>,<wedge>
<values.values>,(values Remembered [<string>])
<rotations>,(rotations (<absoluteDirection> | {<absoluteDirection>}))
<sizes>,(sizes Group [<siteType>] [<direction>] [<roleType> | of:<int> | if:<boolean>] [min:<int>])
<intArray.players.players>,(players <playersTeamType> [if:<boolean>])
<intArray.players.players>,(players <playersManyType> [of:<int>] [if:<boolean>])
<playersManyType>,All
<playersManyType>,Ally
<playersManyType>,Enemy
<playersManyType>,Friend
<playersManyType>,NonMover
<playersTeamType>,Team1
<playersTeamType>,Team10
<playersTeamType>,Team11
<playersTeamType>,Team12
<playersTeamType>,Team13
<playersTeamType>,Team14
<playersTeamType>,Team15
<playersTeamType>,Team16
<playersTeamType>,Team2
<playersTeamType>,Team3
<playersTeamType>,Team4
<playersTeamType>,Team5
<playersTeamType>,Team6
<playersTeamType>,Team7
<playersTeamType>,Team8
<playersTeamType>,Team9
<intArray.math.difference>,(difference <ints> (<ints> | <int>))
<intArray.math.if>,(if <boolean> <ints> [<ints>])
<intArray.math.intersection>,(intersection {<ints>})
<intArray.math.intersection>,(intersection <ints> <ints>)
<intArray.math.union>,(union {<ints>})
<intArray.math.union>,(union <ints> <ints>)
<results>,(results (from:<int> | from:<sites>) (to:<int> | to:<sites>) <int>)
<array>,(array {<int>})
<array>,(array <sites>)
<ahead>,(ahead [<siteType>] <int> [steps:<int>] [<direction>])
<board.phase>,(phase [<siteType>] of:<int>)
<centrePoint>,(centrePoint [<siteType>])
<column>,(column [<siteType>] of:<int>)
<coord>,(coord [<siteType>] row:<int> column:<int>)
<coord>,(coord [<siteType>] <string>)
<cost>,(cost [<siteType>] (at:<int> | in:<sites>))
<handSite>,(handSite (<int> | <roleType>) [<int>])
<id>,(id <string>)
<id>,(id [<string>] <roleType>)
<layer>,(layer of:<int> [<siteType>])
<mapEntry>,(mapEntry [<string>] (<int> | <roleType>))
<regionSite>,(regionSite <sites> index:<int>)
<row>,(row [<siteType>] of:<int>)
<cos>,(cos <float>)
<exp>,(exp <float>)
<floats.math.*>,(* {<float>})
<floats.math.*>,(* <float> <float>)
<floats.math.+>,(+ {<float>})
<floats.math.+>,(+ <float> <float>)
<floats.math.->,(- <float> <float>)
<floats.math./>,(/ <float> <float>)
<floats.math.^>,(^ <float> <float>)
<floats.math.abs>,(abs <float>)
<floats.math.max>,(max {<float>})
<floats.math.max>,(max <float> <float>)
<floats.math.min>,(min {<float>})
<floats.math.min>,(min <float> <float>)
<log>,(log <float>)
<log10>,(log10 <float>)
<sin>,(sin <float>)
<sqrt>,(sqrt <float>)
<tan>,(tan <float>)
<float>,<floats.math.*>
<float>,<floats.math.+>
<float>,<floats.math.->
<float>,<floats.math./>
<float>,<floats.math.^>
<float>,<floats.math.abs>
<float>,<cos>
<float>,<exp>
<float>,int
<float>,<log>
<float>,<log10>
<float>,<floats.math.max>
<float>,<floats.math.min>
<float>,<sin>
<float>,<sqrt>
<float>,<tan>
<float>,<toFloat>
<toFloat>,(toFloat (<boolean> | <int>))
<dim.math.*>,(* {<dim>})
<dim.math.*>,(* <dim> <dim>)
<dim.math.+>,(+ {<dim>})
<dim.math.+>,(+ <dim> <dim>)
<dim.math.->,(- <dim> <dim>)
<dim.math./>,(/ <dim> <dim>)
<dim.math.^>,(^ <dim> <dim>)
<dim.math.abs>,(abs <dim>)
<dim.math.max>,(max <dim> <dim>)
<dim.math.min>,(min <dim> <dim>)
<dim>,<dim.math.*>
<dim>,<dim.math.+>
<dim>,<dim.math.->
<dim>,<dim.math./>
<dim>,<dim.math.^>
<dim>,<dim.math.abs>
<dim>,int
<dim>,<dim.math.max>
<dim>,<dim.math.min>
<ints>,{<int>}
<ints>,<array>
<ints>,<intArray.math.difference>
<ints>,<intArray.math.if>
<ints>,<intArray.math.intersection>
<ints>,<intArray.players.players>
<ints>,<regions>
<ints>,<results>
<ints>,<rotations>
<ints>,<sizes>
<ints>,<team>
<ints>,<intArray.math.union>
<ints>,<values.values>
<int>,<%>
<int>,<dim.math.*>
<int>,<ints.math.*>
<int>,<dim.math.+>
<int>,<ints.math.+>
<int>,<dim.math.->
<int>,<ints.math.->
<int>,<dim.math./>
<int>,<ints.math./>
<int>,<dim.math.^>
<int>,<ints.math.^>
<int>,<dim.math.abs>
<int>,<ints.math.abs>
<int>,<ahead>
<int>,<amount>
<int>,<iterator.between>
<int>,<card.card>
<int>,<centrePoint>
<int>,<column>
<int>,<coord>
<int>,<cost>
<int>,<count.count>
<int>,<counter>
<int>,<iterator.edge>
<int>,<dice.face>
<int>,<iterator.from>
<int>,<handSite>
<int>,<iterator.hint>
<int>,<id>
<int>,<ints.math.if>
<int>,int
<int>,<ints.last.last>
<int>,<layer>
<int>,<level>
<int>,<mapEntry>
<int>,<matchScore>
<int>,<dim.math.max>
<int>,<ints.math.max>
<int>,<dim.math.min>
<int>,<ints.math.min>
<int>,<mover>
<int>,<next>
<int>,<nextPhase>
<int>,<pathExtent>
<int>,<board.phase>
<int>,<pips>
<int>,<iterator.player>
<int>,<pot>
<int>,<prev>
<int>,<regionSite>
<int>,<rotation>
<int>,<row>
<int>,<state.score>
<int>,<site>
<int>,<size>
<int>,<state>
<int>,<iterator.to>
<int>,<toInt>
<int>,<topLevel>
<int>,<iterator.track>
<int>,<trackSite>
<int>,<value>
<int>,<var>
<int>,<what>
<int>,<where>
<int>,<who>
<toInt>,(toInt (<boolean> | <float>))
<boolean>,<!=>
<boolean>,<<>
<boolean>,<<=>
<boolean>,<=>
<boolean>,<>>
<boolean>,<>=>
<boolean>,<booleans.all.all>
<boolean>,<deductionPuzzle.all.all>
<boolean>,<math.and>
<boolean>,int
<boolean>,<can>
<boolean>,<forAll>
<boolean>,<booleans.math.if>
<boolean>,<deductionPuzzle.is.is>
<boolean>,<booleans.is.is>
<boolean>,<booleans.no.no>
<boolean>,<not>
<boolean>,<math.or>
<boolean>,<toBool>
<boolean>,<xor>
<toBool>,(toBool (<int> | <float>))
<directions>,(directions (<absoluteDirection> | {<absoluteDirection>}))
<directions>,(directions [<relativeDirection> | {<relativeDirection>}] [of:<relationType>] [bySite:<boolean>])
<directions>,(directions <siteType> from:<int> to:<int>)
<directions>,(directions Random <direction> num:<int>)
<directions.difference>,(difference <direction> <direction>)
<directions.if>,(if <boolean> <direction> <direction>)
<directions.union>,(union <direction> <direction>)
<end.score>,(score <roleType> <int>)
<payoff>,(payoff <roleType> <float>)
<math.count>,(count <string> <int>)
<math.pair>,(pair <string> <string>)
<math.pair>,(pair <roleType> <roleType>)
<math.pair>,(pair <roleType> <int>)
<math.pair>,(pair <int> <int>)
<math.pair>,(pair <string> <roleType>)
<math.pair>,(pair <roleType> <landmarkType>)
<math.pair>,(pair <roleType> <string>)
<math.pair>,(pair <int> <string>)
<flips>,(flips <int> <int>)
<moves.between>,(between [before:<int>] [<range>] [after:<int>] [if:<boolean>] [trail:<int>] [<apply>])
<moves.from>,(from [<siteType>] [<sites> | <int>] [level:<int>] [if:<boolean>])
<moves.piece>,(piece (<string> | <int> | {<string>} | {<int>}) [state:<int>])
<moves.player>,(player <int>)
<moves.to>,(to [<siteType>] [<sites> | <int>] [level:<int>] [<rotations>] [if:<boolean>] [<apply>])
<graph>,(graph vertices:{{<float>}} [edges:{{<int>}}])
<graph>,(graph <graph>)
<graph>,<operators.add>
<graph>,<basis>
<graph>,<brick>
<graph>,<celtic>
<graph>,<clip>
<graph>,<complete>
<graph>,<concentric>
<graph>,<dual>
<graph>,<hex>
<graph>,<hole>
<graph>,<intersect>
<graph>,<keep>
<graph>,<layers>
<graph>,<makeFaces>
<graph>,<merge>
<graph>,<quadhex>
<graph>,<recoordinate>
<graph>,<regular>
<graph>,<operators.remove>
<graph>,<renumber>
<graph>,<repeat>
<graph>,<rotate>
<graph>,<scale>
<graph>,<shift>
<graph>,<skew>
<graph>,<spiral>
<graph>,<splitCrossings>
<graph>,<square>
<graph>,<subdivide>
<graph>,<tiling>
<graph>,<tri>
<graph>,<trim>
<graph>,<operators.union>
<graph>,<wedge>
<poly>,(poly {{<dim>}})
<poly>,(poly {{<float>}})
<equipment.card>,(card <cardType> rank:<int> value:<int> [trumpRank:<int>] [trumpValue:<int>] [biased:<int>])
<equipment.hint>,(hint <int> [<int>])
<equipment.hint>,(hint {<int>} [<int>])
<equipment.values>,(values <siteType> <range>)
<direction>,<absoluteDirection>
<direction>,<directions.difference>
<direction>,<directions>
<direction>,<directions.if>
<direction>,<relativeDirection>
<direction>,<directions.union>
<absoluteDirection>,Adjacent
<absoluteDirection>,All
<absoluteDirection>,Angled
<absoluteDirection>,Axial
<absoluteDirection>,Base
<absoluteDirection>,CCW
<absoluteDirection>,CW
<absoluteDirection>,D
<absoluteDirection>,DE
<absoluteDirection>,DN
<absoluteDirection>,DNE
<absoluteDirection>,DNW
<absoluteDirection>,DS
<absoluteDirection>,DSE
<absoluteDirection>,DSW
<absoluteDirection>,DW
<absoluteDirection>,Diagonal
<absoluteDirection>,Downward
<absoluteDirection>,E
<absoluteDirection>,ENE
<absoluteDirection>,ESE
<absoluteDirection>,In
<absoluteDirection>,N
<absoluteDirection>,NE
<absoluteDirection>,NNE
<absoluteDirection>,NNW
<absoluteDirection>,NW
<absoluteDirection>,OffDiagonal
<absoluteDirection>,Orthogonal
<absoluteDirection>,Out
<absoluteDirection>,Rotational
<absoluteDirection>,S
<absoluteDirection>,SE
<absoluteDirection>,SSE
<absoluteDirection>,SSW
<absoluteDirection>,SW
<absoluteDirection>,SameLayer
<absoluteDirection>,Support
<absoluteDirection>,U
<absoluteDirection>,UE
<absoluteDirection>,UN
<absoluteDirection>,UNE
<absoluteDirection>,UNW
<absoluteDirection>,US
<absoluteDirection>,USE
<absoluteDirection>,USW
<absoluteDirection>,UW
<absoluteDirection>,Upward
<absoluteDirection>,W
<absoluteDirection>,WNW
<absoluteDirection>,WSW
<compassDirection>,E
<compassDirection>,ENE
<compassDirection>,ESE
<compassDirection>,N
<compassDirection>,NE
<compassDirection>,NNE
<compassDirection>,NNW
<compassDirection>,NW
<compassDirection>,S
<compassDirection>,SE
<compassDirection>,SSE
<compassDirection>,SSW
<compassDirection>,SW
<compassDirection>,W
<compassDirection>,WNW
<compassDirection>,WSW
<directionFacing>,<absoluteDirection>
<directionFacing>,<directions>
<directionFacing>,<directions.if>
<directionFacing>,<relativeDirection>
<relativeDirection>,BL
<relativeDirection>,BLL
<relativeDirection>,BLLL
<relativeDirection>,BR
<relativeDirection>,BRR
<relativeDirection>,BRRR
<relativeDirection>,Backward
<relativeDirection>,Backwards
<relativeDirection>,FL
<relativeDirection>,FLL
<relativeDirection>,FLLL
<relativeDirection>,FR
<relativeDirection>,FRR
<relativeDirection>,FRRR
<relativeDirection>,Forward
<relativeDirection>,Forwards
<relativeDirection>,Leftward
<relativeDirection>,Leftwards
<relativeDirection>,OppositeDirection
<relativeDirection>,Rightward
<relativeDirection>,Rightwards
<relativeDirection>,SameDirection
<stackDirection>,FromBottom
<stackDirection>,FromTop
<cardType>,Ace
<cardType>,Eight
<cardType>,Five
<cardType>,Four
<cardType>,Jack
<cardType>,Joker
<cardType>,King
<cardType>,Nine
<cardType>,Queen
<cardType>,Seven
<cardType>,Six
<cardType>,Ten
<cardType>,Three
<cardType>,Two
<dealableType>,Cards
<dealableType>,Dominoes
<suitType>,Clubs
<suitType>,Diamonds
<suitType>,Hearts
<suitType>,Spades
<modeType>,Alternating
<modeType>,Simulation
<modeType>,Simultaneous
<passEndType>,Draw
<passEndType>,NoEnd
<prevType>,Mover
<prevType>,MoverLastTurn
<repetitionType>,Positional
<repetitionType>,PositionalInTurn
<repetitionType>,Situational
<repetitionType>,SituationalInTurn
<resultType>,Abandon
<resultType>,Crash
<resultType>,Draw
<resultType>,Loss
<resultType>,Tie
<resultType>,Win
<roleType>,All
<roleType>,Ally
<roleType>,Each
<roleType>,Enemy
<roleType>,Friend
<roleType>,Mover
<roleType>,Neutral
<roleType>,Next
<roleType>,NonMover
<roleType>,P1
<roleType>,P10
<roleType>,P11
<roleType>,P12
<roleType>,P13
<roleType>,P14
<roleType>,P15
<roleType>,P16
<roleType>,P2
<roleType>,P3
<roleType>,P4
<roleType>,P5
<roleType>,P6
<roleType>,P7
<roleType>,P8
<roleType>,P9
<roleType>,Player
<roleType>,Prev
<roleType>,Shared
<roleType>,Team1
<roleType>,Team10
<roleType>,Team11
<roleType>,Team12
<roleType>,Team13
<roleType>,Team14
<roleType>,Team15
<roleType>,Team16
<roleType>,Team2
<roleType>,Team3
<roleType>,Team4
<roleType>,Team5
<roleType>,Team6
<roleType>,Team7
<roleType>,Team8
<roleType>,Team9
<roleType>,TeamMover
<whenType>,EndOfTurn
<whenType>,StartOfTurn
<basisType>,Brick
<basisType>,Celtic
<basisType>,Circle
<basisType>,Concentric
<basisType>,Dual
<basisType>,Hexagonal
<basisType>,HexagonalPyramidal
<basisType>,Mesh
<basisType>,Morris
<basisType>,NoBasis
<basisType>,QuadHex
<basisType>,Spiral
<basisType>,Square
<basisType>,SquarePyramidal
<basisType>,T31212
<basisType>,T333333_33434
<basisType>,T33336
<basisType>,T33344
<basisType>,T33434
<basisType>,T3464
<basisType>,T3636
<basisType>,T4612
<basisType>,T488
<basisType>,Triangular
<hiddenData>,Count
<hiddenData>,Rotation
<hiddenData>,State
<hiddenData>,Value
<hiddenData>,What
<hiddenData>,Who
<landmarkType>,BottomSite
<landmarkType>,CentreSite
<landmarkType>,FirstSite
<landmarkType>,LastSite
<landmarkType>,LeftSite
<landmarkType>,RightSite
<landmarkType>,Topsite
<puzzleElementType>,Cell
<puzzleElementType>,Edge
<puzzleElementType>,Hint
<puzzleElementType>,Vertex
<regionTypeDynamic>,Empty
<regionTypeDynamic>,Enemy
<regionTypeDynamic>,NotEmpty
<regionTypeDynamic>,NotEnemy
<regionTypeDynamic>,NotOwn
<regionTypeDynamic>,Own
<regionTypeStatic>,AllDirections
<regionTypeStatic>,AllSites
<regionTypeStatic>,Columns
<regionTypeStatic>,Corners
<regionTypeStatic>,Diagonals
<regionTypeStatic>,HintRegions
<regionTypeStatic>,Layers
<regionTypeStatic>,Regions
<regionTypeStatic>,Rows
<regionTypeStatic>,Sides
<regionTypeStatic>,SidesNoCorners
<regionTypeStatic>,SubGrids
<regionTypeStatic>,Touching
<regionTypeStatic>,Vertices
<relationType>,Adjacent
<relationType>,All
<relationType>,Diagonal
<relationType>,OffDiagonal
<relationType>,Orthogonal
<shapeType>,Circle
<shapeType>,Cross
<shapeType>,Custom
<shapeType>,Diamond
<shapeType>,Hexagon
<shapeType>,Limping
<shapeType>,NoShape
<shapeType>,Polygon
<shapeType>,Prism
<shapeType>,Quadrilateral
<shapeType>,Rectangle
<shapeType>,Regular
<shapeType>,Rhombus
<shapeType>,Spiral
<shapeType>,Square
<shapeType>,Star
<shapeType>,Triangle
<shapeType>,Wedge
<shapeType>,Wheel
<siteType>,Cell
<siteType>,Edge
<siteType>,Vertex
<stepType>,F
<stepType>,L
<stepType>,R
<storeType>,Inner
<storeType>,None
<storeType>,Outer
<tilingBoardlessType>,Hexagonal
<tilingBoardlessType>,Square
<tilingBoardlessType>,Triangular
<string>,string
